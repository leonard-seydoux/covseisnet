
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_example_2.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_example_2.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_example_2.py:


Stream synchronization
======================

This example demonstrates how to synchronize a stream of traces using the
:func:`~covseisnet.stream.Stream.synchronize` method.

The :func:`~covseisnet.stream.Stream.synchronize` method aligns the traces in a
stream to a common start time. The method is useful when the traces in a stream
have different start times, but the same sampling rate.

.. GENERATED FROM PYTHON SOURCE LINES 13-26

.. code-block:: Python


    import matplotlib.dates as mdates
    import matplotlib.pyplot as plt

    import covseisnet as csn

    # Read example stream
    stream = csn.read()

    # Highpass filter the stream to better see the sync in high frequencies
    stream.filter("highpass", freq=30)
    print(stream)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Network Stream of 3 traces from 1 stations (synced):
    BW.RJOB..EHZ | 2009-08-24T00:20:03.000000Z - 2009-08-24T00:20:32.990000Z | 100.0 Hz, 3000 samples
    BW.RJOB..EHN | 2009-08-24T00:20:03.000000Z - 2009-08-24T00:20:32.990000Z | 100.0 Hz, 3000 samples
    BW.RJOB..EHE | 2009-08-24T00:20:03.000000Z - 2009-08-24T00:20:32.990000Z | 100.0 Hz, 3000 samples




.. GENERATED FROM PYTHON SOURCE LINES 27-32

Desynchronize the traces
------------------------

This first section allows to desynchronize the traces in the stream, in
order to demonstrate the synchronization method from the example stream.

.. GENERATED FROM PYTHON SOURCE LINES 32-47

.. code-block:: Python


    # Make the traces start at different times
    reference_starttime = stream[0].stats.starttime
    sampling_interval = stream[0].stats.delta
    stream[1].stats.starttime = reference_starttime + sampling_interval * 1.3
    stream[2].stats.starttime = reference_starttime + sampling_interval * 0.6

    # Collect a small number of samples for visualization
    sart_sample = 1000
    n_samples = 20
    for trace in stream:
        trace.data = trace.data[sart_sample : sart_sample + n_samples]

    print(stream)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Network Stream of 3 traces from 1 stations (not synced):
    BW.RJOB..EHZ | 2009-08-24T00:20:03.000000Z - 2009-08-24T00:20:03.190000Z | 100.0 Hz, 20 samples
    BW.RJOB..EHN | 2009-08-24T00:20:03.013000Z - 2009-08-24T00:20:03.203000Z | 100.0 Hz, 20 samples
    BW.RJOB..EHE | 2009-08-24T00:20:03.006000Z - 2009-08-24T00:20:03.196000Z | 100.0 Hz, 20 samples




.. GENERATED FROM PYTHON SOURCE LINES 48-55

Synchronize the traces
----------------------

We now synchronize the traces in the stream using the
:func:`~covseisnet.stream.Stream.synchronize` method. The method finds the
latest start time and the earliest end time among the traces in the stream,
and aligns the traces to these times with interpolation.

.. GENERATED FROM PYTHON SOURCE LINES 55-61

.. code-block:: Python


    # Synchronize the traces
    stream_sync = stream.copy()
    stream_sync.synchronize()
    print(stream_sync)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Network Stream of 3 traces from 1 stations (synced):
    BW.RJOB..EHZ | 2009-08-24T00:20:03.013000Z - 2009-08-24T00:20:03.183000Z | 100.0 Hz, 18 samples
    BW.RJOB..EHN | 2009-08-24T00:20:03.013000Z - 2009-08-24T00:20:03.183000Z | 100.0 Hz, 18 samples
    BW.RJOB..EHE | 2009-08-24T00:20:03.013000Z - 2009-08-24T00:20:03.183000Z | 100.0 Hz, 18 samples




.. GENERATED FROM PYTHON SOURCE LINES 62-64

Compare synchronized and original traces
----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 64-80

.. code-block:: Python


    # Plot
    fig, ax = plt.subplots(3, sharex=True, sharey=True)
    for trace, synced, subplot in zip(stream, stream_sync, ax):
        subplot.plot(trace.times("matplotlib"), trace.data, ".-", label="Original")
        subplot.plot(synced.times("matplotlib"), synced.data, ".-", label="Synced")
        subplot.grid()
        subplot.set_title(trace.id, size="medium", weight="normal")

    # Labels
    ax[0].legend(loc="upper right")
    ax[1].set_ylabel("Amplitude (counts)")
    xticks = mdates.AutoDateLocator()
    xticklabels = mdates.ConciseDateFormatter(xticks)
    ax[2].xaxis.set_major_locator(xticks)
    ax[2].xaxis.set_major_formatter(xticklabels)



.. image-sg:: /auto_examples/images/sphx_glr_plot_example_2_001.png
   :alt: BW.RJOB..EHZ, BW.RJOB..EHN, BW.RJOB..EHE
   :srcset: /auto_examples/images/sphx_glr_plot_example_2_001.png, /auto_examples/images/sphx_glr_plot_example_2_001_4_00x.png 4.00x
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.387 seconds)


.. _sphx_glr_download_auto_examples_plot_example_2.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_example_2.ipynb <plot_example_2.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_example_2.py <plot_example_2.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
