
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_example_d3_constant_velocity_loc.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_example_d3_constant_velocity_loc.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_example_d3_constant_velocity_loc.py:


Locating events within a constant velocity model
================================================

This example shows how to calculate the differential travel times of seismic
waves in a constant velocity model between two receivers. We first define the
model and the sources and receivers coordinates. We then calculate the travel
times for each receiver using the class
:class:`~covseisnet.travel_times.TravelTimes`, and we calculate the differential
travel times using the class
:class:`~covseisnet.travel_times.DifferentialTravelTimes`. Finally, we locate the
source of the seismic waves using the class
:class:`~covseisnet.backprojection.DifferentialBackProjection` and plot the
results on a map. 

.. GENERATED FROM PYTHON SOURCE LINES 16-20

.. code-block:: Python



    import covseisnet as csn








.. GENERATED FROM PYTHON SOURCE LINES 22-36

Load seismograms
----------------

We first load the seismograms from the example data set. We downloaded the
seismogram from the Wilber 3 interface at
https://ds.iris.edu/wilber3/data_request/leonard-seydoux/2020-10-05-mb44-aegean-sea-1.
These seismograms contains the record of the Mb 4.4 earthquake that occurred
in the Aegean Sea on October 5, 2020 at 14:57:51 UTC at 39.9°N, 23.3° E and
10 km depth.

We also pre-process the seismograms by merging overlapping traces, removing
the linear trend, filtering the data with a high-pass filter with a corner
frequency of 0.01 Hz, and synchronizing the traces, as shown in the other
examples.

.. GENERATED FROM PYTHON SOURCE LINES 36-46

.. code-block:: Python


    # Load seismograms
    stream = csn.NetworkStream.read("../data/aegean_sea_example.mseed")

    # Pre-process
    stream.merge(1, fill_value=0)
    stream.detrend("linear")
    stream.filter("highpass", freq=0.01)
    stream.synchronize()








.. GENERATED FROM PYTHON SOURCE LINES 47-52

Associate coordinates to the seismograms
----------------------------------------

We associate the coordinates of the seismograms to the traces using the
method :func:`~covseisnet.stream.Stream.assign_coordinates`. The coordinates

.. GENERATED FROM PYTHON SOURCE LINES 52-56

.. code-block:: Python


    inventory = stream.download_inventory(datacenter="NOA")
    stream.assign_coordinates(inventory)








.. GENERATED FROM PYTHON SOURCE LINES 57-63

Create a constant velocity model
--------------------------------

We first create a constant velocity model with a velocity of 5 km/s. In order
to do so, we simply need to define the geographical extent of the model, the
resolution of the grid, and the velocity.

.. GENERATED FROM PYTHON SOURCE LINES 63-70

.. code-block:: Python


    model = csn.velocity.ConstantVelocityModel(
        extent=(40, 41, 50, 51, 0, 20),
        shape=(20, 20, 20),
        velocity=3.5,
    )








.. GENERATED FROM PYTHON SOURCE LINES 71-82

Calculate the travel times between the sources and the receiver
---------------------------------------------------------------

Each grid point of the model is considered as a source and the receiver is
defined by the user. In the example below, the receiver is located at
coordinates (40.7, 50.2, 0), somewhere in the model's domain. The travel
times are calculated using the class
:class:`~covseisnet.travel_times.TravelTimes`.

We can then represent the travel times on a map using the method
:func:`~covseisnet.plot.grid3d`.

.. GENERATED FROM PYTHON SOURCE LINES 82-100

.. code-block:: Python


    # Calculate the travel times
    traveltime_1 = csn.travel_times.TravelTimes(
        model, receiver_coordinates=(40.7, 50.2, 0)
    )

    traveltime_2 = csn.travel_times.TravelTimes(
        model, receiver_coordinates=(40.2, 50.9, 0)
    )

    # Plot the traveltime grid
    ax = csn.plot.grid3d(
        traveltime_1,
        cmap="RdPu",
        label="Travel time (s)",
        vmin=0,
    )




.. image-sg:: /auto_examples/images/sphx_glr_plot_example_d3_constant_velocity_loc_001.png
   :alt: plot example d3 constant velocity loc
   :srcset: /auto_examples/images/sphx_glr_plot_example_d3_constant_velocity_loc_001.png, /auto_examples/images/sphx_glr_plot_example_d3_constant_velocity_loc_001_4_00x.png 4.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 101-107

---------------------------------------

The differential travel times are calculated using the class
:class:`~covseisnet.travel_times.DifferentialTravelTimes`. The differential
travel times are calculated between the two receivers defined above, and
shown on a map using the function :func:`~covseisnet.plot.grid3d`.

.. GENERATED FROM PYTHON SOURCE LINES 107-115

.. code-block:: Python


    # Calculate the differential travel times
    differential_traveltime = csn.travel_times.DifferentialTravelTimes(
        traveltime_1, traveltime_2
    )

    # Plot the differential traveltime grid
    ax = csn.plot.grid3d(differential_traveltime, label="Travel time (s)")



.. image-sg:: /auto_examples/images/sphx_glr_plot_example_d3_constant_velocity_loc_002.png
   :alt: plot example d3 constant velocity loc
   :srcset: /auto_examples/images/sphx_glr_plot_example_d3_constant_velocity_loc_002.png, /auto_examples/images/sphx_glr_plot_example_d3_constant_velocity_loc_002_4_00x.png 4.00x
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 6.690 seconds)


.. _sphx_glr_download_auto_examples_plot_example_d3_constant_velocity_loc.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_example_d3_constant_velocity_loc.ipynb <plot_example_d3_constant_velocity_loc.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_example_d3_constant_velocity_loc.py <plot_example_d3_constant_velocity_loc.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_example_d3_constant_velocity_loc.zip <plot_example_d3_constant_velocity_loc.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
